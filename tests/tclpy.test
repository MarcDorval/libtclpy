if {[lsearch [namespace children] ::tcltest] == -1} {
	package require tcltest
	namespace import ::tcltest::*
}

package require tclpy

# =========
# PY
# =========
test py-1.1 {incorrect usage} {
	list [catch {py} errMsg] $errMsg
} {1 {wrong # args: should be "py subcommand ?arg ...?"}}

# =========
# PY EVAL
# =========
test py_eval-1.1 {incorrect eval usage} {
	list [catch {py eval} errMsg1] $errMsg1\
	     [catch {py eval {print 1} {print 2}} errMsg2] $errMsg2
} {1 {wrong # args: should be "py eval evalString"}\
   1 {wrong # args: should be "py eval evalString"}}

test py_eval-1.2 {eval returns nothing} {
	list [py eval {1+1}]
} {{}}

test py_eval-1.2 {basic eval} -setup {
	set randdir tmp_[expr {rand()}]
} -body {
	py eval "def mk(dir): os.mkdir(dir)"
	py eval "import os; mk('$randdir')"
	file isdirectory $randdir
} -result {1} -cleanup {
	file delete $randdir
}

# =========
# PY IMPORT
# =========
test py_import-1.1 {incorrect import usage} {
	list [catch {py import} errMsg1] $errMsg1\
	     [catch {py import -from os} errMsg2] $errMsg2
} {1 {wrong # args: should be "py import module"}\
   1 {wrong # args: should be "py import module"}}

test py_import-1.2 {basic import} -body {
	py import re
	py eval "import sys; assert 're' in sys.modules; assert 're' in globals()"
} -result {}

test py_import-1.3 {submodule import} -body {
	py import xml.dom
	py eval "import sys; assert 'dom' in dir(xml)"
} -result {}

# =========
# cleanup
# =========
::tcltest::cleanupTests
return

